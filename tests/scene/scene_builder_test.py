from pytest_mock import MockFixture

import dearpygui.dearpygui as dpg

from agents_playground.counter.counter import Counter
from agents_playground.renderers.color import Colors
from agents_playground.legacy.scene.scene import Scene
from agents_playground.legacy.scene.scene_builder import SceneBuilder
from types import SimpleNamespace

class TestSceneBuilder:
  dpg.create_context()

  def test_establish_cell_size(self, mocker: MockFixture) -> None:
    sb = SceneBuilder(id_generator=mocker.Mock(), task_scheduler=mocker.Mock(), pre_sim_scheduler=mocker.Mock())
    cell_size = [14,13]
    scene_data = SimpleNamespace(scene=SimpleNamespace(cell_size=cell_size))
    scene = sb.build(scene_data)
    assert scene.cell_size.width == cell_size[0]
    assert scene.cell_size.height == cell_size[1]

  def test_build_agents(self, mocker: MockFixture) -> None:
    spy_id_generator = mocker.spy(dpg, 'generate_uuid')
    sb = SceneBuilder(id_generator=spy_id_generator, task_scheduler=mocker.Mock(), pre_sim_scheduler=mocker.Mock())
    agents = [
      SimpleNamespace(id = 7, crest = 'aqua'),
      SimpleNamespace(id = 8, crest = 'magenta'),
      SimpleNamespace(id = 9, crest ='green', location = [36,18])
    ]
    scene_data = SimpleNamespace(scene=SimpleNamespace(cell_size=[1,2], agents=agents))
    
    scene = sb.build(scene_data)

    assert len(scene.agents) == 3

    # Each agent requires three generated IDs (Agent.id, Agent.render_id, Agent.aabb_id). 
    assert spy_id_generator.call_count == 15

    # The Generated ID is used for organizing the agents.
    # The ID specified in the TOML file is stored as Agent.toml_id
    # We use the IdMap class to map between the IDs specified in the file
    # and the ones generated by dpg.
    agent_a_id = sb._id_map.lookup_agent_by_toml(7)
    agent_c_id = sb._id_map.lookup_agent_by_toml(9)
    
    assert scene.agents[agent_a_id].identity.id == agent_a_id
    assert scene.agents[agent_a_id].identity.render_id == agent_a_id + 1
    assert scene.agents[agent_a_id].identity.community_id == 7
    assert scene.agents[agent_a_id].style.fill_color == Colors['aqua'].value

    assert scene.agents[agent_c_id].identity.community_id == 9
    assert scene.agents[agent_c_id].position.location[0] == 36
    assert scene.agents[agent_c_id].position.location[1] == 18

  def test_building_linear_paths(self, mocker: MockFixture) -> None:
    spy_id_generator = mocker.spy(dpg, 'generate_uuid')
    render_map = {'fake_line_segment_renderer': mocker.Mock()}
    sb = SceneBuilder(id_generator=spy_id_generator, task_scheduler=mocker.Mock(), render_map=render_map, pre_sim_scheduler=mocker.Mock())
    linear_paths = [
      SimpleNamespace(id=23, description='fake desc', steps = [17, 12, 3, 4], renderer='fake_line_segment_renderer', closed=True),
      SimpleNamespace(id=42, description='fake desc', steps = [22, 97, 45, 62], renderer='fake_line_segment_renderer', closed=True),
    ]

    scene_data = SimpleNamespace(scene=SimpleNamespace(cell_size=[1,2], paths=SimpleNamespace(linear=linear_paths)))
    scene:Scene = sb.build(scene_data)

    path_a_id = sb._id_map.lookup_linear_path_by_toml(23)
    assert scene.paths[path_a_id].id == path_a_id
    assert scene.paths[path_a_id].toml_id == 23
    assert scene.paths[path_a_id]._cp == (17, 12, 3, 4)
    assert scene.paths[path_a_id]._renderer == render_map['fake_line_segment_renderer']
    scene.paths[path_a_id]._renderer.assert_not_called()

  def test_building_circular_paths(self, mocker: MockFixture) -> None:
    spy_id_generator = mocker.spy(dpg, 'generate_uuid')
    render_map = {'circular_path_renderer': mocker.Mock()}
    sb = SceneBuilder(id_generator=spy_id_generator, task_scheduler=mocker.Mock(), render_map=render_map, pre_sim_scheduler=mocker.Mock())
    circular_paths = [
      SimpleNamespace(id = 14, center = [40,5], radius = 4, renderer = 'circular_path_renderer'),
      SimpleNamespace(id = 32, center = [40,5], radius = 1, renderer = 'circular_path_renderer'),
    ]

    scene_data = SimpleNamespace(scene=SimpleNamespace(cell_size=[1,2], paths=SimpleNamespace(circular=circular_paths)))
    scene:Scene = sb.build(scene_data)

    path_b_id = sb._id_map.lookup_circular_path_by_toml(32)
    assert scene.paths[path_b_id].id == path_b_id
    assert scene.paths[path_b_id].toml_id == 32
    assert scene.paths[path_b_id].radius == 1
    assert scene.paths[path_b_id].center == (40, 5)
    assert scene.paths[path_b_id]._renderer == render_map['circular_path_renderer']
    scene.paths[path_b_id]._renderer.assert_not_called()

  def test_scheduling_tasks(self, mocker: MockFixture) -> None:
    spy_id_generator = mocker.spy(dpg, 'generate_uuid')
    task_map = {
      'agent_traverse_linear_path': mocker.Mock()
    }
    ts = SimpleNamespace(add_task=mocker.Mock())
    sb = SceneBuilder(id_generator=spy_id_generator, task_scheduler=ts, task_map=task_map, pre_sim_scheduler=mocker.Mock())
    schedule = [
      SimpleNamespace(
        coroutine = 'agent_traverse_linear_path',
        linear_path_id = 21,
        agent_id = 14,
        step_index = 1,
        run_per_frame = 1,
        speed = 0.2
      )
    ]

    sb._id_map.register_agent(agent_id=spy_id_generator(), toml_id=14)
    sb._id_map.register_linear_path(path_id=spy_id_generator(), toml_id=21)
    scene_data = SimpleNamespace(scene=SimpleNamespace(cell_size=[1,2], schedule=schedule))
    scene:Scene = sb.build(scene_data)
    ts.add_task.assert_called_once()

  def test_building_entities(self, mocker: MockFixture) -> None:
    spy_id_generator = mocker.spy(dpg, 'generate_uuid')
    render_map = {'simple_circle_renderer': mocker.Mock()}
    entities_map = {'update_active_radius': mocker.Mock()}
    sb = SceneBuilder(id_generator=spy_id_generator, 
      task_scheduler=mocker.Mock(),
      render_map=render_map,
      entities_map=entities_map,
      pre_sim_scheduler=mocker.Mock()
    )
    circles = [
      SimpleNamespace(
        id = 44,
        description='pulsing circle',
        default_radius = 20,
        active_radius = 20,
        scale = 10,
        location=[100, 100],
        color=[0, 0, 0],
        fill=[0, 0, 255],
        renderer='simple_circle_renderer',
        update_method='update_active_radius'
      )
    ]    

    scene_data = SimpleNamespace(scene=SimpleNamespace(cell_size=[1,2], entities=SimpleNamespace(circles=circles)))
    scene: Scene = sb.build(scene_data)

    assert scene.get_entity('circles', 44).toml_id == 44