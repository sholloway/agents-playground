# This is a comment. 

"""
This is a block comment.
"""

# Mandatory Meta Attributes 
:schema: 1.0.0 # Refer to a version of the landscape definition.

# Optional Meta Attributes
:author: FName LName 
:license: The license type for this attribute. 
:contact: email address 
:creation_time: 2024-01-21 hh:mm:ss
:updated_time: YYYY-MM-DD hh:mm:ss

# Users can define their own custom values for storing arbitrary strings. 
# What is the use case for this? 
:custom_attribute: some text limited to a single line

# Landscape definition
:type: square
:tile_uom: meters 
:tile_width: 1
:tile_height: 1 
:wall_height: 1 
:gravity: 9.80665
:gravity_uom: m/s2 # Standard Gravity Constant in meters per second squared.

# Tiles: OBJ Style
v X Y X 
vn X Y Z W 
t v1 v2 v3 v4 

# Tiles TOML Style 
tile = [
  {id = 1, type='SQUARE', vertices=[[x,y,z], [x,y,z], [x,y,z], [x,y,z]], material=material_id}
  {id = 2, type='HEXAGON', vertices=[[x,y,z], [x,y,z], [x,y,z], [x,y,z], [x,y,z], [x,y,z]], material=material_id}
]

# Naive Python Def of a Landscape 
@dataclass
class Landscape:
  meta: LandscapeMetaAttributes
  custom_attributes: Dict[str, Any]
  definition: LandscapeDefinition
  tiles: Dict[Coordinate3d, Tile] # Option 1: Store tiles in a dict by their 3d coordinates. 

# Naive Python Def of a Tile 
@dataclass
class Tile:
  location: Coordinate3d # In the tile coordinate system 
  transformation: Maybe[Matrix4x4]
  edges: List[Edge3d]
  vertices: List[Vertex3d]                            # Clockwise winding 
  neighbors: Dict[TileDirection, Tile]                # Direction for a tile is N/S/E/W, it would be different for a triangle or hexagon. 
  state: Maybe[TileState]                             # An optional member that enables storing state in a table. 
  state_transition_map: Maybe[TileStateTransitionMap] # If there is a state, then there needs to be a transition map to enable FSM behavior.
  system: Maybe[TileSystem]                           # An optional member to enable having logic associated with the tile.
  material: MaterialId                                # A related material to render the tile as. 
  texture: Maybe[TextureId]                           # An optional texture to project onto the tile. 

# Operations that work on Tiles
# How much of this should be on the CPU vs GPU?
module TileOperators: 
  - def to_world_space(tile: Tile) -> 

# Materials 
materials = [
  {id: 123, material_params = [...]}
]

