[simulation.ui]
title = 'Declarative Motion'
description = 'Finite State Machin (FSM) and Fuzzy Finite State Machine (FFSM) based motion.'
instructions = 'Click the start button to begin the simulation.'

[registered_functions]
renderers = ['circular_path_renderer']

[scene]
cell_size = [20, 20]
height = 1300 # In pixels.

layers = [
  { label = 'Grid',         renderer = 'render_grid_layer',         show = false},
  { label = 'Paths',        renderer = 'render_paths_layer',        show = true},
  { label = 'Entities',     renderer = 'render_entities_layer',     show = true},
  { label = 'Agents',       renderer = 'render_agents_layer',       show = true},
  { label = "Agent's AABB", renderer = 'render_agents_aabb_layer',  show = false },
]

agents = [
  # A final 4 agents that all rotate at different speeds and directions.
  { id = 1, crest='green', location=[36,18]},
  { id = 2, crest='blue',  location=[44,18]},
]

# Schedule tasks to be run in the simulation
# In this sim, each agent is indepently bound to a circular path. The task
# transitions each state to their next state based on it's bound state transition 
# table and updates it's location for it's next step.
# Note: The axis is at the upper left hand corner so a circlular path is rotating
# clockwise with 0 at the 3 PM hour. So 90 degrees is at the 6 PM spot.
schedule = [
  { coroutine = 'agent_navigation', agent_id = 1, circular_path_id = 1, starting_degree = 270, speed = 1},
  { coroutine = 'agent_navigation', agent_id = 2, circular_path_id = 2, starting_degree = 90, speed = 1}
]

# Declare the agents states.
# If state-type isn't specified, the scene builder uses NamedAgentState(name).
agent_states = [
  { name = 'IDLE_STATE'},
  { name = 'NAVIGATING_CLOCKWISE'},
  { name = 'NAVIGATING_COUNTER_CLOCKWISE'},
  { name = 'SPINNING_CC'},
  { name = 'SPINNING_CW'},
  { name = 'PULSING'},
  { name = 'RESTING'}
]

# Map default states to transition maps.
# if there is no scene.default_agent_states then the engine will use the 
# first agent_states item declared as the default state for each agent_state_transition_map.
default_agent_states = [
  { agent_state_transition_map = 'default_agent_state_map', default_state='IDLE_STATE' }
] 

# Declare the the state transition table. 
# state (required): The name of the starting state. 
# transitions_to (required): The name of the state to transition to.
#
# when (optional): 
# The name of a registered conditional function to determine if the transition
# should occur.
#
# likelihood (optional): 
# Supports probability based state rules. A value between 0 and 1. Where 
# 1 means it has 100% probability of the transition occurring and 0 means
# there is no chance. Provisions a WeightedCoin instance with the likelihood value.
#
# Have this be:
# NAVIGATING_CLOCKWISE, NAVIGATING_COUNTER_CLOCKWISE, SPINNING_CC, SPINNING_CW
# PULSING, RESTING
# Perhaps a better format would be
# { state = 'RESTING', transitions_to = ['IDLE_STATE', NAVIGATING_CLOCKWISE, etc], chances = [0.1, 0.4, 0.8]},
[agent_state_transition_maps] 
default_agent_state_map = [
  { state = 'IDLE_STATE',                   transitions_to = [ 'NAVIGATING_CLOCKWISE', 'NAVIGATING_COUNTER_CLOCKWISE'],             chances = [0.5, 1.0]},
  { state = 'NAVIGATING_CLOCKWISE',         transitions_to = [ 'NAVIGATING_COUNTER_CLOCKWISE', 'SPINNING_CC', 'SPINNING_CW'],       chances = [0.3, 0.6, 1.0]},
  { state = 'NAVIGATING_COUNTER_CLOCKWISE', transitions_to = [ 'NAVIGATING_CLOCKWISE', 'SPINNING_CC', 'SPINNING_CW'],               chances = [0.3, 0.6, 1.0]},
  { state = 'SPINNING_CC',                  transitions_to = [ 'SPINNING_CW',  'PULSING'],                                          chances = [0.5, 1.0]},
  { state = 'SPINNING_CW',                  transitions_to = [ 'SPINNING_CC',  'PULSING'],                                          chances = [0.5, 1.0]},
  { state = 'PULSING',                      transitions_to = [ 'RESTING',  'NAVIGATING_CLOCKWISE', 'NAVIGATING_COUNTER_CLOCKWISE'], chances = [0.3, 0.6, 1.0]},
  { state = 'RESTING',                      transitions_to = [ 'NAVIGATING_CLOCKWISE', 'NAVIGATING_COUNTER_CLOCKWISE'],             chances = [0.5, 1.0]}
]

# Create two circular paths.
[scene.paths]
circular = [
  { id = 1, center = [10, 10], radius = 8, renderer = 'circular_path_renderer'},
  { id = 2, center = [40, 10], radius = 8, renderer = 'circular_path_renderer'}
]

# I'd like to dynamically display the state of each agent on the screen. 
[scene.entities]
state_displays = [
  { id = 1, title = "FSM State",  location = [10, 10], width = 40, height = 5, color = [0, 0, 0], fill = [221, 160, 221], renderer = 'text_display', update_method = 'agent_state_display_refresh', related = 'agent', related_id = 1},  
  { id = 2, title = "FFSM State", location = [40, 10], width = 40, height = 5, color = [0, 0, 0], fill = [221, 160, 221], renderer = 'text_display', update_method = 'agent_state_display_refresh', related = 'agent', related_id = 1}  
]

